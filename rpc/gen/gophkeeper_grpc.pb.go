// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: gophkeeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GophkeeperGrpc_Register_FullMethodName     = "/gophkeeper_grpc.gophkeeperGrpc/Register"
	GophkeeperGrpc_Login_FullMethodName        = "/gophkeeper_grpc.gophkeeperGrpc/Login"
	GophkeeperGrpc_Create_FullMethodName       = "/gophkeeper_grpc.gophkeeperGrpc/Create"
	GophkeeperGrpc_Update_FullMethodName       = "/gophkeeper_grpc.gophkeeperGrpc/Update"
	GophkeeperGrpc_GetAllByType_FullMethodName = "/gophkeeper_grpc.gophkeeperGrpc/GetAllByType"
	GophkeeperGrpc_Get_FullMethodName          = "/gophkeeper_grpc.gophkeeperGrpc/Get"
	GophkeeperGrpc_GetAll_FullMethodName       = "/gophkeeper_grpc.gophkeeperGrpc/GetAll"
	GophkeeperGrpc_Delete_FullMethodName       = "/gophkeeper_grpc.gophkeeperGrpc/Delete"
)

// GophkeeperGrpcClient is the client API for GophkeeperGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophkeeperGrpcClient interface {
	Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Create(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemIDResponse, error)
	Update(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllByType(ctx context.Context, in *GetByTypeRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Get(ctx context.Context, in *ItemIDRequest, opts ...grpc.CallOption) (*Item, error)
	GetAll(ctx context.Context, in *ItemIDRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Delete(ctx context.Context, in *ItemIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gophkeeperGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewGophkeeperGrpcClient(cc grpc.ClientConnInterface) GophkeeperGrpcClient {
	return &gophkeeperGrpcClient{cc}
}

func (c *gophkeeperGrpcClient) Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, GophkeeperGrpc_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperGrpcClient) Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, GophkeeperGrpc_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperGrpcClient) Create(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemIDResponse, error) {
	out := new(ItemIDResponse)
	err := c.cc.Invoke(ctx, GophkeeperGrpc_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperGrpcClient) Update(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GophkeeperGrpc_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperGrpcClient) GetAllByType(ctx context.Context, in *GetByTypeRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, GophkeeperGrpc_GetAllByType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperGrpcClient) Get(ctx context.Context, in *ItemIDRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, GophkeeperGrpc_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperGrpcClient) GetAll(ctx context.Context, in *ItemIDRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, GophkeeperGrpc_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperGrpcClient) Delete(ctx context.Context, in *ItemIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GophkeeperGrpc_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophkeeperGrpcServer is the server API for GophkeeperGrpc service.
// All implementations must embed UnimplementedGophkeeperGrpcServer
// for forward compatibility
type GophkeeperGrpcServer interface {
	Register(context.Context, *AuthRequest) (*AuthResponse, error)
	Login(context.Context, *AuthRequest) (*AuthResponse, error)
	Create(context.Context, *ItemRequest) (*ItemIDResponse, error)
	Update(context.Context, *ItemRequest) (*emptypb.Empty, error)
	GetAllByType(context.Context, *GetByTypeRequest) (*GetResponse, error)
	Get(context.Context, *ItemIDRequest) (*Item, error)
	GetAll(context.Context, *ItemIDRequest) (*GetResponse, error)
	Delete(context.Context, *ItemIDRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGophkeeperGrpcServer()
}

// UnimplementedGophkeeperGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedGophkeeperGrpcServer struct {
}

func (UnimplementedGophkeeperGrpcServer) Register(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGophkeeperGrpcServer) Login(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGophkeeperGrpcServer) Create(context.Context, *ItemRequest) (*ItemIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGophkeeperGrpcServer) Update(context.Context, *ItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGophkeeperGrpcServer) GetAllByType(context.Context, *GetByTypeRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByType not implemented")
}
func (UnimplementedGophkeeperGrpcServer) Get(context.Context, *ItemIDRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGophkeeperGrpcServer) GetAll(context.Context, *ItemIDRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedGophkeeperGrpcServer) Delete(context.Context, *ItemIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGophkeeperGrpcServer) mustEmbedUnimplementedGophkeeperGrpcServer() {}

// UnsafeGophkeeperGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophkeeperGrpcServer will
// result in compilation errors.
type UnsafeGophkeeperGrpcServer interface {
	mustEmbedUnimplementedGophkeeperGrpcServer()
}

func RegisterGophkeeperGrpcServer(s grpc.ServiceRegistrar, srv GophkeeperGrpcServer) {
	s.RegisterService(&GophkeeperGrpc_ServiceDesc, srv)
}

func _GophkeeperGrpc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperGrpcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophkeeperGrpc_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperGrpcServer).Register(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophkeeperGrpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperGrpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophkeeperGrpc_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperGrpcServer).Login(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophkeeperGrpc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperGrpcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophkeeperGrpc_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperGrpcServer).Create(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophkeeperGrpc_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperGrpcServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophkeeperGrpc_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperGrpcServer).Update(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophkeeperGrpc_GetAllByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperGrpcServer).GetAllByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophkeeperGrpc_GetAllByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperGrpcServer).GetAllByType(ctx, req.(*GetByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophkeeperGrpc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperGrpcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophkeeperGrpc_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperGrpcServer).Get(ctx, req.(*ItemIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophkeeperGrpc_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperGrpcServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophkeeperGrpc_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperGrpcServer).GetAll(ctx, req.(*ItemIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophkeeperGrpc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperGrpcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophkeeperGrpc_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperGrpcServer).Delete(ctx, req.(*ItemIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GophkeeperGrpc_ServiceDesc is the grpc.ServiceDesc for GophkeeperGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophkeeperGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper_grpc.gophkeeperGrpc",
	HandlerType: (*GophkeeperGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _GophkeeperGrpc_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GophkeeperGrpc_Login_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _GophkeeperGrpc_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GophkeeperGrpc_Update_Handler,
		},
		{
			MethodName: "GetAllByType",
			Handler:    _GophkeeperGrpc_GetAllByType_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GophkeeperGrpc_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _GophkeeperGrpc_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GophkeeperGrpc_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gophkeeper.proto",
}
