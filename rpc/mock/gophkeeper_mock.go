// Code generated by MockGen. DO NOT EDIT.
// Source: rpc/gen/gophkeeper_grpc.pb.go

// Package gophkeepermock is a generated GoMock package.
package gophkeepermock

import (
	context "context"
	gen "gophkeeper/rpc/gen"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockGophkeeperGrpcClient is a mock of GophkeeperGrpcClient interface.
type MockGophkeeperGrpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockGophkeeperGrpcClientMockRecorder
}

// MockGophkeeperGrpcClientMockRecorder is the mock recorder for MockGophkeeperGrpcClient.
type MockGophkeeperGrpcClientMockRecorder struct {
	mock *MockGophkeeperGrpcClient
}

// NewMockGophkeeperGrpcClient creates a new mock instance.
func NewMockGophkeeperGrpcClient(ctrl *gomock.Controller) *MockGophkeeperGrpcClient {
	mock := &MockGophkeeperGrpcClient{ctrl: ctrl}
	mock.recorder = &MockGophkeeperGrpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophkeeperGrpcClient) EXPECT() *MockGophkeeperGrpcClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGophkeeperGrpcClient) Create(ctx context.Context, in *gen.ItemRequest, opts ...grpc.CallOption) (*gen.ItemIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*gen.ItemIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGophkeeperGrpcClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGophkeeperGrpcClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockGophkeeperGrpcClient) Delete(ctx context.Context, in *gen.ItemIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGophkeeperGrpcClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGophkeeperGrpcClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockGophkeeperGrpcClient) Get(ctx context.Context, in *gen.ItemIDRequest, opts ...grpc.CallOption) (*gen.Item, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*gen.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGophkeeperGrpcClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGophkeeperGrpcClient)(nil).Get), varargs...)
}

// GetAll mocks base method.
func (m *MockGophkeeperGrpcClient) GetAll(ctx context.Context, in *gen.ItemIDRequest, opts ...grpc.CallOption) (*gen.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(*gen.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGophkeeperGrpcClientMockRecorder) GetAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGophkeeperGrpcClient)(nil).GetAll), varargs...)
}

// GetAllByType mocks base method.
func (m *MockGophkeeperGrpcClient) GetAllByType(ctx context.Context, in *gen.GetByTypeRequest, opts ...grpc.CallOption) (*gen.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllByType", varargs...)
	ret0, _ := ret[0].(*gen.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByType indicates an expected call of GetAllByType.
func (mr *MockGophkeeperGrpcClientMockRecorder) GetAllByType(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByType", reflect.TypeOf((*MockGophkeeperGrpcClient)(nil).GetAllByType), varargs...)
}

// Login mocks base method.
func (m *MockGophkeeperGrpcClient) Login(ctx context.Context, in *gen.AuthRequest, opts ...grpc.CallOption) (*gen.AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*gen.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockGophkeeperGrpcClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGophkeeperGrpcClient)(nil).Login), varargs...)
}

// Register mocks base method.
func (m *MockGophkeeperGrpcClient) Register(ctx context.Context, in *gen.AuthRequest, opts ...grpc.CallOption) (*gen.AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*gen.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockGophkeeperGrpcClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGophkeeperGrpcClient)(nil).Register), varargs...)
}

// Update mocks base method.
func (m *MockGophkeeperGrpcClient) Update(ctx context.Context, in *gen.ItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGophkeeperGrpcClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGophkeeperGrpcClient)(nil).Update), varargs...)
}

// MockGophkeeperGrpcServer is a mock of GophkeeperGrpcServer interface.
type MockGophkeeperGrpcServer struct {
	ctrl     *gomock.Controller
	recorder *MockGophkeeperGrpcServerMockRecorder
}

// MockGophkeeperGrpcServerMockRecorder is the mock recorder for MockGophkeeperGrpcServer.
type MockGophkeeperGrpcServerMockRecorder struct {
	mock *MockGophkeeperGrpcServer
}

// NewMockGophkeeperGrpcServer creates a new mock instance.
func NewMockGophkeeperGrpcServer(ctrl *gomock.Controller) *MockGophkeeperGrpcServer {
	mock := &MockGophkeeperGrpcServer{ctrl: ctrl}
	mock.recorder = &MockGophkeeperGrpcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophkeeperGrpcServer) EXPECT() *MockGophkeeperGrpcServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGophkeeperGrpcServer) Create(arg0 context.Context, arg1 *gen.ItemRequest) (*gen.ItemIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*gen.ItemIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGophkeeperGrpcServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGophkeeperGrpcServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockGophkeeperGrpcServer) Delete(arg0 context.Context, arg1 *gen.ItemIDRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGophkeeperGrpcServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGophkeeperGrpcServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockGophkeeperGrpcServer) Get(arg0 context.Context, arg1 *gen.ItemIDRequest) (*gen.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*gen.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGophkeeperGrpcServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGophkeeperGrpcServer)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockGophkeeperGrpcServer) GetAll(arg0 context.Context, arg1 *gen.ItemIDRequest) (*gen.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(*gen.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGophkeeperGrpcServerMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGophkeeperGrpcServer)(nil).GetAll), arg0, arg1)
}

// GetAllByType mocks base method.
func (m *MockGophkeeperGrpcServer) GetAllByType(arg0 context.Context, arg1 *gen.GetByTypeRequest) (*gen.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByType", arg0, arg1)
	ret0, _ := ret[0].(*gen.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByType indicates an expected call of GetAllByType.
func (mr *MockGophkeeperGrpcServerMockRecorder) GetAllByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByType", reflect.TypeOf((*MockGophkeeperGrpcServer)(nil).GetAllByType), arg0, arg1)
}

// Login mocks base method.
func (m *MockGophkeeperGrpcServer) Login(arg0 context.Context, arg1 *gen.AuthRequest) (*gen.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*gen.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockGophkeeperGrpcServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGophkeeperGrpcServer)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockGophkeeperGrpcServer) Register(arg0 context.Context, arg1 *gen.AuthRequest) (*gen.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*gen.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockGophkeeperGrpcServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGophkeeperGrpcServer)(nil).Register), arg0, arg1)
}

// Update mocks base method.
func (m *MockGophkeeperGrpcServer) Update(arg0 context.Context, arg1 *gen.ItemRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGophkeeperGrpcServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGophkeeperGrpcServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedGophkeeperGrpcServer mocks base method.
func (m *MockGophkeeperGrpcServer) mustEmbedUnimplementedGophkeeperGrpcServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGophkeeperGrpcServer")
}

// mustEmbedUnimplementedGophkeeperGrpcServer indicates an expected call of mustEmbedUnimplementedGophkeeperGrpcServer.
func (mr *MockGophkeeperGrpcServerMockRecorder) mustEmbedUnimplementedGophkeeperGrpcServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGophkeeperGrpcServer", reflect.TypeOf((*MockGophkeeperGrpcServer)(nil).mustEmbedUnimplementedGophkeeperGrpcServer))
}

// MockUnsafeGophkeeperGrpcServer is a mock of UnsafeGophkeeperGrpcServer interface.
type MockUnsafeGophkeeperGrpcServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGophkeeperGrpcServerMockRecorder
}

// MockUnsafeGophkeeperGrpcServerMockRecorder is the mock recorder for MockUnsafeGophkeeperGrpcServer.
type MockUnsafeGophkeeperGrpcServerMockRecorder struct {
	mock *MockUnsafeGophkeeperGrpcServer
}

// NewMockUnsafeGophkeeperGrpcServer creates a new mock instance.
func NewMockUnsafeGophkeeperGrpcServer(ctrl *gomock.Controller) *MockUnsafeGophkeeperGrpcServer {
	mock := &MockUnsafeGophkeeperGrpcServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeGophkeeperGrpcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGophkeeperGrpcServer) EXPECT() *MockUnsafeGophkeeperGrpcServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedGophkeeperGrpcServer mocks base method.
func (m *MockUnsafeGophkeeperGrpcServer) mustEmbedUnimplementedGophkeeperGrpcServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGophkeeperGrpcServer")
}

// mustEmbedUnimplementedGophkeeperGrpcServer indicates an expected call of mustEmbedUnimplementedGophkeeperGrpcServer.
func (mr *MockUnsafeGophkeeperGrpcServerMockRecorder) mustEmbedUnimplementedGophkeeperGrpcServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGophkeeperGrpcServer", reflect.TypeOf((*MockUnsafeGophkeeperGrpcServer)(nil).mustEmbedUnimplementedGophkeeperGrpcServer))
}
